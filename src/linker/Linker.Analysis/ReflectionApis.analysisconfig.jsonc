[
  {
    // Activator.CreateInstance over Type
    // Type type must exist (otherwise we wouldn't get to the call), so the only remaining problem is that
    // we require a presense of the .ctor for CreateInstance to work - and so member trimming will not work correctly.
    "Type": "System.Activator",
    "Methods": [
      "CreateInstance(System.Type,System.ReflectionBindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])",
      "CreateInstance(System.Type,System.ReflectionBindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)",
      "CreateInstance(System.Type,System.Object[],System.Object[])",
      "CreateInstance(System.Type,System.Object[])",
      "CreateInstance(System.Type,System.Boolean)",
      "CreateInstance(System.Type)",
      "CreateInstance<T>()"
    ],
    "Aspect": "MemberTrim",
    "Warn": "CreateInstance over type requires the type's .ctor to be referenced",
    "Category": "CreateInstance"
  },
  {
    // Activator.CreateInstance over string assembly, string type
    // This is effectively load assembly, find type and create instance in a row.
    // So even assembly trimming might have issues.
    "Type": "System.Activator",
    "Methods": [
      "CreateInstance(System.String,System.String,System.Boolean,System.ReflectionBindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])",
      "CreateInstance(System.String,System.String,System.Object[],System.Object[])",
      "CreateInstance(System.String,System.String,System.Object[])",
      "CreateInstance(System.String,System.String)"
    ],
    "Aspect": "AssemblyTrim",
    "Warn": "CreateInstance over assembly and type name, if the assembly name is specified make sure the assembly is referenced, otherwise make sure the type is referenced and its .ctor is referenced",
    "Category": "CreateInstance"
  },

  {
    // Assembly.GetType
    // Adds a type to closure on existing assembly, so type trimming will not work correctly.
    // TODO: If the type is forwarded from the assembly in question it will also find it
    //   This could mean problems even for assembly trimming, if we rely on type tracking to figure out which assemblies to keep.
    "Type": "System.Reflection.Assembly",
    "Methods": [
      "GetType(System.String)",
      "GetType(System.String,System.Boolean)",
      "GetType(System.String,System.Boolean,System.Boolean)"
    ],
    "Aspect": "TypeTrim",
    "Warn": "GetType on a string, make sure that the type is referenced",
    "Category": "KnownReflection"
  }
]